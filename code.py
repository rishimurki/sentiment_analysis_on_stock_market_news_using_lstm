# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G5rQL_-vQdekHxanX_CJGfiGDthn4ldo
"""

import pandas as pd
import nltk
from nltk.stem import WordNetLemmatizer
from keras.models import Sequential
from keras.layers import Embedding, LSTM, Dense
from keras.preprocessing.text import Tokenizer
from keras_preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import re

# Download WordNet lemmatizer data
nltk.download('wordnet')

# Initialize the WordNet lemmatizer
lemmatizer = WordNetLemmatizer()

from google.colab import files
uploaded = files.upload()
data = pd.read_csv('Sentiment_Stock_data.csv')

# Perform lemmatization on the text data
#data['Sentence'] = data['Sentence'].apply(lambda x: ' '.join([lemmatizer.lemmatize(word) for word in x.split()]))
data['Sentence'] = data['Sentence'].apply(lambda x: re.sub(r'[^\w\s]', '', str(x)))  # Remove non-alphanumeric characters
data['Sentence'] = data['Sentence'].apply(lambda x: ' '.join([lemmatizer.lemmatize(word) for word in x.split()]))
# Split the data into train and test sets
train_data, test_data, train_labels, test_labels = train_test_split(data['Sentence'], data['Sentiment'], test_size=0.5)
train_data.head()

# Tokenize the text
tokenizer = Tokenizer()
tokenizer.fit_on_texts(train_data)
train_sequences = tokenizer.texts_to_sequences(train_data)
test_sequences = tokenizer.texts_to_sequences(test_data)

# Pad the sequences
max_sequence_length = max(max(len(seq) for seq in train_sequences), max(len(seq) for seq in test_sequences))
train_sequences_padded = pad_sequences(train_sequences, maxlen=max_sequence_length)
test_sequences_padded = pad_sequences(test_sequences, maxlen=max_sequence_length)

# Build the LSTM model
model = Sequential()
model.add(Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=100, input_length=max_sequence_length))
model.add(LSTM(units=256))
model.add(Dense(units=1, activation='sigmoid'))

model.compile(optimizer=adam, loss='binary_crossentropy', metrics=['accuracy'])

model.fit(train_sequences_padded, train_labels, epochs=8, batch_size=32)


# Encode the labels
label_encoder = LabelEncoder()
train_labels_encoded = label_encoder.fit_transform(train_labels)
test_labels_encoded = label_encoder.transform(test_labels)
loss, accuracy = model.evaluate(test_sequences_padded, test_labels_encoded)
print('Test Loss:', loss)
print('Test Accuracy:', accuracy)

# Make predictions
predictions = model.predict(test_sequences_padded)
predicted_labels = (predictions > 0.5).astype(int)
predicted_labels = label_encoder.inverse_transform(predicted_labels)

# Calculate accuracy score
accuracy_score = accuracy_score(test_labels, predicted_labels)
print('Accuracy Score:', accuracy_score)
